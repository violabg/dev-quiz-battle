"use client";

import { Button } from "@/components/ui/button";
import { useSupabase } from "@/lib/supabase-provider";
import { Loader2 } from "lucide-react";
import { useState } from "react";
import { toast } from "sonner";

export default function SeedData() {
  const { supabase } = useSupabase();
  const [loading, setLoading] = useState(false);
  const [logs, setLogs] = useState<string[]>([]);

  const addLog = (message: string) => {
    setLogs((prev) => [...prev, message]);
  };

  const seedData = async () => {
    setLoading(true);
    setLogs([]);
    try {
      // Create test users with more realistic email addresses
      const testUsers = [
        {
          username: "testuser1",
          email: "dev.quiz.battle.test1@gmail.com",
          password: "Password123!",
        },
        {
          username: "testuser2",
          email: "dev.quiz.battle.test2@gmail.com",
          password: "Password123!",
        },
        {
          username: "testuser3",
          email: "dev.quiz.battle.test3@gmail.com",
          password: "Password123!",
        },
      ];

      const createdUsers = [];

      // Create users and profiles
      for (const user of testUsers) {
        // Check if user already exists
        const { data: existingUser } = await supabase
          .from("profiles")
          .select("*")
          .eq("username", user.username)
          .maybeSingle();

        if (existingUser) {
          addLog(`User ${user.username} already exists, skipping...`);
          createdUsers.push(existingUser);
          continue;
        }

        // Create auth user
        addLog(`Creating user ${user.username}...`);
        const { data: authData, error: authError } = await supabase.auth.signUp(
          {
            email: user.email,
            password: user.password,
            options: {
              data: {
                username: user.username,
              },
            },
          }
        );

        if (authError) {
          addLog(
            `Error creating auth user ${user.username}: ${authError.message}`
          );
          continue;
        }

        if (!authData.user) {
          addLog(`Failed to create auth user ${user.username}`);
          continue;
        }

        // Create profile
        addLog(`Creating profile for ${user.username}...`);
        const { data: profileData, error: profileError } = await supabase
          .from("profiles")
          .insert({
            id: authData.user.id,
            username: user.username,
          })
          .select()
          .single();

        if (profileError) {
          addLog(
            `Error creating profile for ${user.username}: ${profileError.message}`
          );
          continue;
        }

        createdUsers.push(profileData);
        addLog(`Successfully created user ${user.username}`);
      }

      // Create a sample game
      if (createdUsers.length > 0) {
        const hostId = createdUsers[0].id;
        addLog(`Creating sample game with host ${createdUsers[0].username}...`);

        const { data: gameData, error: gameError } = await supabase
          .from("games")
          .insert({
            host_id: hostId,
            status: "waiting",
            max_players: 4,
            code: "", // Will be auto-generated by the trigger
          })
          .select()
          .single();

        if (gameError) {
          addLog(`Error creating game: ${gameError.message}`);
        } else {
          addLog(`Created game with code: ${gameData.code}`);

          // Add players to the game
          for (let i = 0; i < createdUsers.length; i++) {
            addLog(`Adding player ${createdUsers[i].username} to game...`);
            const { error: playerError } = await supabase
              .from("game_players")
              .insert({
                game_id: gameData.id,
                player_id: createdUsers[i].id,
                turn_order: i + 1,
              });

            if (playerError) {
              addLog(
                `Error adding player ${createdUsers[i].username} to game: ${playerError.message}`
              );
            } else {
              addLog(`Added player ${createdUsers[i].username} to game`);
            }
          }
        }
      }

      toast.success("Seeding completato", {
        description: "Controlla i log per i dettagli",
      });
    } catch (error: any) {
      addLog(`Unexpected error: ${error.message}`);
      toast.error("Errore", {
        description: error.message,
      });
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="space-y-6">
      <Button onClick={seedData} disabled={loading}>
        {loading ? <Loader2 className="mr-2 w-4 h-4 animate-spin" /> : null}
        Popola dati di test
      </Button>

      {logs.length > 0 && (
        <div className="bg-muted mt-4 p-4 border rounded-lg max-h-96 overflow-auto">
          <h3 className="mb-2 font-semibold">Log:</h3>
          <div className="font-mono text-sm">
            {logs.map((log, index) => (
              <div
                key={index}
                className="py-1 last:border-0 border-b border-border"
              >
                {log}
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  );
}
